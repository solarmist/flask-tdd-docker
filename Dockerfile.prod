###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.1-alpine as builder

# install dependencies
RUN apk update && \
    apk add --virtual build-deps gcc python-dev musl-dev && \
    apk add postgresql-dev && \
    apk add netcat-openbsd

# set working directory
# RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
# Prevents buffering io
ENV PYTHONUNBUFFERED 1

# Install application dependencies
RUN pip install --upgrade pip
# Add the app
COPY . /usr/src/app
RUN pip install -r requirements.txt
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

# lint
RUN flake8 .
RUN black --exclude=migrations .
RUN isort project/**/*.py



#########
# FINAL #
#########

# pull official base image
FROM python:3.8.1-alpine

# set working directory
# RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
# Prevents buffering io
ENV PYTHONUNBUFFERED 1
# Arg is used to pass in variables to a docker file
# But we don't need it because Azure is directly injecting these environment variables
# ARG SECRET_KEY
# ENV SECRET_KEY $SECRET_KEY

# install psycopg2 dependencies
RUN apk update \
     && apk add postgresql-dev gcc python3-dev musl-dev

COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# add and run as non-root user
RUN adduser -D app_user
USER app_user

# Start gunicorn listening to both IPv6 and v4
CMD gunicorn --bind 0.0.0.0:7000 --timeout 600 project.app:app
# CMD gunicorn --bind 0.0.0.0:$PORT manage:app